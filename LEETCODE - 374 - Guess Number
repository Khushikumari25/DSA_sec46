pproach (Binary Search)

Since the number is between 1 and n and we know whether the guess is higher or lower, we can use binary search.

Maintain two pointers: low = 1 and high = n.

While low <= high:

Guess the middle number: mid = low + (high - low) / 2.

Call guess(mid):

If 0 → correct guess → return mid.

If -1 → picked number is lower → set high = mid - 1.

If 1 → picked number is higher → set low = mid + 1.

Repeat until the number is found.

Complexity:

Time: O(log n) — halving search space each step.

Space: O(1) — constant extra space.



/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int low = 1, high = n;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int res = guess(mid);
            if (res == 0) return mid;
            else if (res < 0) high = mid - 1;
            else low = mid + 1;
        }
        return -1;
    }
}
