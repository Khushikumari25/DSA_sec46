Approach (Stack-based Trapping Rain Water):

Traverse the elevation map (height[]) using index i.

Use a stack to store indices of bars.

For each bar:

While the current bar is taller than the bar at the top of the stack:

Pop the top bar (this is a “valley”).

If the stack becomes empty → no boundary → break.

Calculate distance between current bar and new top of stack.

Calculate boundedHeight = min(height of current bar, height of new top bar) − height of popped bar.

Add distance * boundedHeight to total water.

Push current index i onto the stack.

Continue until all bars are processed.

Reason:
Using a stack helps efficiently find boundaries (left and right) for trapping water without scanning each element repeatedly.

Time Complexity: O(n) — each bar is pushed and popped at most once.
Space Complexity: O(n) — for storing indices in the stack.


import java.util.Stack;

class Solution {
    public int trap(int[] height) {
        int n = height.length, water = 0;
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && height[i] > height[stack.peek()]) {
                int top = stack.pop();
                
                if (stack.isEmpty()) {
                    break;
                }
                
                int distance = i - stack.peek() - 1;
                int boundedHeight = Math.min(height[i], height[stack.peek()]) - height[top];
                
                water += distance * boundedHeight;
            }
            stack.push(i);
        }
        
        return water;
    }
}
